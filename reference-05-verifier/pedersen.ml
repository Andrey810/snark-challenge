open Core_kernel
open Snarkette
open Fold_lib
open Mnt6753

(* TODO: Encode these using base64 or something. *)
let pedersen_points =
  [ ( "332637027557984585263317650500984572911029666110240270052776816409842001629441009391914692"
    , "256729384495629324506420372961192720918348265673564549794471951979904664963951714723671245"
    )
  ; ( "317636346738201844363072211531037005916212220880107581418751757742684937914450594188415214"
    , "34528004492629100771376637597612406651713499584905780489286194141574291240293310116415477"
    )
  ; ( "301993958032627472884437745615529438033253545721338569638490859186611357261503455475144560"
    , "146838269365541568898424192297459095856365681624642067425805412886771331230439469722095457"
    )
  ; ( "128129903535426931605566944870567299118257828089601530702537687963370272749913056019263948"
    , "241533714158383240264541770223151071469220576304583859791081751809254489361787785034789292"
    )
  ; ( "313740059656320278624446394988661572874903691784478118184415417081043868987379996532675000"
    , "100335334128845081242859700333050668946392262163243686493207843641156092956137855903739186"
    )
  ; ( "423183895593383061799561339264968652038340040714054275680700025954978728606721325061813986"
    , "313969101172182642564501383126895492652625186481651229385533160513306266107255895040965835"
    )
  ; ( "96515863600062668253667988564365773313561516965030035964759662895203654760595267751273022"
    , "74788359380435946369732993003083344506070059318176369841012459568171255289307688643768892"
    )
  ; ( "133805277542469035530250675647787997526131024301973452468057797508664393260190079584060932"
    , "473248979559415085339364815352614347743448895122993254491829858719453440371739397007461158"
    )
  ; ( "193145450621136862339560730801073269842002469065910956677832837218816947495711002260152576"
    , "16255012080098881505792406186591030441202762121828886745554048531238641365799402942870343"
    )
  ; ( "227178667986388803585115344621131283407798287495545402043280943015629427526751052148991114"
    , "475003404954778522592169245938178450555712839789630810550000761777308152460251354101521050"
    )
  ; ( "423133681764677277086792611137892122334228781032625093129146984124166840674465788309849992"
    , "365324352402801055309192141629343166814047966867902840699773790982764508051119135029931427"
    )
  ]
  |> Array.of_list_map ~f:(fun (x, y) ->
         G1.of_affine_coordinates (Fq.of_string x, Fq.of_string y) )

let triples_per_scalar = Fq.length_in_bits / 4

let times_sixteen =
  let sixteen = N.of_int 16 in
  fun x -> N.(sixteen * x)

let multiscale xs =
  let rec loop i acc =
    if i < 0 then acc
    else
      let acc = G1.(acc + acc) in
      let acc =
        List.fold xs ~init:acc ~f:(fun acc (s, g) ->
            if N.test_bit s i then G1.(acc + g) else acc )
      in
      loop (i - 1) acc
  in
  loop (Mnt4753.Fq.length_in_bits - 1) G1.zero

let pedersen =
  let triples_to_scalar ts =
    List.fold ts
      ~init:(N.of_int 0, N.of_int 1)
      ~f:(fun (acc, sixteen_to_i) (b0, b1, sign) ->
        let open N in
        let term =
          match (b0, b1) with
          | false, false ->
              sixteen_to_i
          | true, false ->
              sixteen_to_i + sixteen_to_i
          | false, true ->
              sixteen_to_i + sixteen_to_i + sixteen_to_i
          | true, true ->
              let xx = sixteen_to_i + sixteen_to_i in
              xx + xx
        in
        let acc = if sign then acc - term else acc + term in
        (acc, times_sixteen sixteen_to_i) )
    |> fst
  in
  fun ts ->
    Fold.(to_list (string_triples "BoweGabizonHash" +> ts))
    |> List.groupi ~break:(fun i _ _ -> i mod triples_per_scalar = 0)
    |> List.mapi ~f:(fun i trips ->
           (N.(triples_to_scalar trips % Mnt4753.Fq.order), pedersen_points.(i))
       )
    |> multiscale |> G1.to_affine_coordinates |> fst
